# python -m streamlit run app1.py


import streamlit as st
import cv2
import numpy as np
from PIL import Image
import matplotlib.pyplot as plt
from tensorflow.keras.models import load_model
import pandas as pd
import matplotlib.pyplot as plt
plt.style.use('default')
import os
import tensorflow as tf
import keras
import cv2
import spotipy
from spotipy.oauth2 import SpotifyOAuth
from spotipy.oauth2 import SpotifyClientCredentials
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
from sklearn.cluster import KMeans
from sklearn.metrics.pairwise import cosine_similarity


# Load data
Music_Player = pd.read_csv("data_moods.csv")
Music_Player = Music_Player[['name','artist', 'id','mood','popularity']]
faceCascade = cv2.CascadeClassifier("haarcascade_frontalface_default.xml")

# Recommend Songs Based on Song
data_song_input = pd.read_csv("data.csv")
data_song_input = data_song_input.sample(n=50000,random_state=42).reset_index(drop=True)

numerical_features = [
    "valence", "danceability", "energy", "tempo", 
    "acousticness", "liveness", "speechiness", "instrumentalness"
]


scaler = StandardScaler()
df_scaled = pd.DataFrame(
    scaler.fit_transform(data_song_input[numerical_features]), 
    columns=numerical_features                    
)

optimal_k = 5  # S·ªë c·ª•m t·ªëi ∆∞u
kmeans = KMeans(n_clusters=optimal_k, random_state=42)  # Kh·ªüi t·∫°o m√¥ h√¨nh K-Means
data_song_input["Cluster"] = kmeans.fit_predict(df_scaled)  # G√°n nh√£n c·ª•m cho t·ª´ng d√≤ng d·ªØ li·ªáu

# Tr·ª±c quan h√≥a c√°c c·ª•m b·∫±ng PCA (Ph√¢n t√≠ch th√†nh ph·∫ßn ch√≠nh)
from sklearn.decomposition import PCA

pca = PCA(n_components=2)  # Gi·∫£m d·ªØ li·ªáu xu·ªëng 2 chi·ªÅu ƒë·ªÉ tr·ª±c quan h√≥a
pca_result = pca.fit_transform(df_scaled)  # √Åp d·ª•ng PCA tr√™n d·ªØ li·ªáu ƒë√£ chu·∫©n h√≥a

def recommend_songs_based_on_song(song_name, df, num_recommendations=5):
    # X√°c ƒë·ªãnh c·ª•m c·ªßa b√†i h√°t ƒë·∫ßu v√†o:
    song_cluster = df[df["name"] == song_name]["Cluster"].values[0]

    # L·ªçc c√°c b√†i h√°t c√πng c·ª•m:
    same_cluster_songs = df[df["Cluster"] == song_cluster]

    # T√≠nh ƒë·ªô t∆∞∆°ng ƒë·ªìng (cosine similarity):
    song_index = same_cluster_songs[same_cluster_songs["name"] == song_name].index[0]
    cluster_features = same_cluster_songs[numerical_features]
    similarity = cosine_similarity(cluster_features, cluster_features)

    # L·∫•y c√°c b√†i h√°t t∆∞∆°ng ƒë·ªìng nh·∫•t:
    similar_songs = np.argsort(similarity[song_index])[-(num_recommendations + 1):-1][::-1]
    recommendations = same_cluster_songs.iloc[similar_songs][["name", "year", "artists", "popularity", "id"]]

    return recommendations



###########################
# Load pre-trained model and class names
CNN_Model = load_model("CNN_model.h5")
Emotion_Classes = ['Happy', 'Disgust', 'Fear', 'Angry', 'Neutral', 'Sad', 'Surprise']

# Making Songs Recommendations Based on Predicted Class
def Recommend_Songs(pred_class, Num_song_rcm=5):
    
    if( pred_class=='Disgust' ):

        Play = Music_Player[Music_Player['mood'] =='Sad' ]
        Play = Play.sort_values(by="popularity", ascending=False)
        Play = Play[:Num_song_rcm].reset_index(drop=True)
        return Play

    if( pred_class=='Happy' or pred_class=='Sad' ):

        Play = Music_Player[Music_Player['mood'] =='Happy' ]
        Play = Play.sort_values(by="popularity", ascending=False)
        Play = Play[:Num_song_rcm].reset_index(drop=True)
        return Play

    if( pred_class=='Fear' or pred_class=='Angry' ):

        Play = Music_Player[Music_Player['mood'] =='Calm' ]
        Play = Play.sort_values(by="popularity", ascending=False)
        Play = Play[:Num_song_rcm].reset_index(drop=True)
        return Play

    if( pred_class=='Surprise' or pred_class=='Neutral' ):

        Play = Music_Player[Music_Player['mood'] =='Energetic' ]
        Play = Play.sort_values(by="popularity", ascending=False)
        Play = Play[:Num_song_rcm].reset_index(drop=True)
        return Play

def load_and_prep_image(image: np.ndarray):
    """
    Ti·ªÅn x·ª≠ l√Ω ·∫£nh ƒë·∫ßu v√†o cho model CNN.
    """
    # Chuy·ªÉn sang ·∫£nh x√°m
    gray_img = cv2.cvtColor(image, cv2.COLOR_BGR2GRAY)
    
    # Ph√°t hi·ªán khu√¥n m·∫∑t
    face_cascade = cv2.CascadeClassifier(cv2.data.haarcascades + 'haarcascade_frontalface_default.xml')
    faces = face_cascade.detectMultiScale(gray_img, 1.1, 4)
    
    # N·∫øu t√¨m th·∫•y khu√¥n m·∫∑t, c·∫Øt v√† x·ª≠ l√Ω v√πng khu√¥n m·∫∑t
    if len(faces) > 0:
        x, y, w, h = faces[0]
        face_img = image[y:y + h, x:x + w]
    else:
        face_img = image  # N·∫øu kh√¥ng t√¨m th·∫•y khu√¥n m·∫∑t, s·ª≠ d·ª•ng ·∫£nh g·ªëc
    
    # Chuy·ªÉn sang RGB v√† resize v·ªÅ k√≠ch th∆∞·ªõc 48x48
    rgb_img = cv2.cvtColor(face_img, cv2.COLOR_BGR2RGB)
    rgb_img = cv2.resize(rgb_img, (48, 48))
    rgb_img = rgb_img / 255.0  # Chu·∫©n h√≥a
    return rgb_img

def predict_emotion(image: np.ndarray):
    """
    D·ª± ƒëo√°n c·∫£m x√∫c t·ª´ ·∫£nh ƒë·∫ßu v√†o.
    """
    processed_image = load_and_prep_image(image)
    img_batch = np.expand_dims(processed_image, axis=0)
    pred = CNN_Model.predict(img_batch)
    pred_class = Emotion_Classes[np.argmax(pred)]
    return pred_class, pred[0]

def display_recommendations(emotion, Num_song_rcm=5):
    # L·∫•y dataframe b√†i h√°t ƒë·ªÅ xu·∫•t
    recommended_songs_df = Recommend_Songs(emotion, Num_song_rcm)
    print(f"DataFrame returned: {recommended_songs_df}")  # In DataFrame ra ƒë·ªÉ ki·ªÉm tra

    if recommended_songs_df is not None:
        
        # Chuy·ªÉn t·∫•t c·∫£ d·ªØ li·ªáu th√†nh ki·ªÉu string n·∫øu c·∫ßn
        recommended_songs_df = recommended_songs_df.applymap(str)

        # ƒêi·ªÅu ch·ªânh ƒë·ªãnh d·∫°ng DataFrame (v√≠ d·ª•: ch·ªâ hi·ªÉn th·ªã c√°c c·ªôt quan tr·ªçng)
        displayed_df = recommended_songs_df[['name', 'artist', 'mood', 'popularity']]

        # Hi·ªÉn th·ªã DataFrame v·ªõi chi·ªÅu r·ªông c√°c c·ªôt t·ª± ƒë·ªông ƒëi·ªÅu ch·ªânh
        st.dataframe(displayed_df, width=1200)  # ƒêi·ªÅu ch·ªânh chi·ªÅu r·ªông c·ªßa DataFrame
        
        # T·∫°o c√°c button "Nghe" cho m·ªói b√†i h√°t
        for index, row in recommended_songs_df.iterrows():
            song_id = row['name']  # L·∫•y ID b√†i h√°t 
            if st.button(f"Nghe {row['name']}", key=f"play_button_{index}"):
                play_song_on_spotify(song_id)

    else:
        st.error("Kh√¥ng c√≥ b√†i h√°t ƒë·ªÅ xu·∫•t!")

# H√†m ph√°t nh·∫°c tr√™n Spotify
# def play_song_on_spotify(song_name):
#     """
#     T√¨m ki·∫øm b√†i h√°t v√† t·∫°o link tr·ª±c ti·∫øp ƒë·∫øn Spotify
#     Parameters:
#         song_name (str): T√™n b√†i h√°t c·∫ßn t√¨m
#     """
#     try:
#         # Kh·ªüi t·∫°o Spotify client v·ªõi client credentials
#         client_credentials_manager = SpotifyClientCredentials(
#             client_id="6fe0ab17a16546c1a1f9032f1b154625",
#             client_secret="bc68112c81324882bc092f8c42f8ca6d"
#         )
#         sp = spotipy.Spotify(client_credentials_manager=client_credentials_manager)

#         # T√¨m ki·∫øm b√†i h√°t
#         result = sp.search(q=song_name, type="track", limit=1)

#         if result['tracks']['items']:
#             track = result['tracks']['items'][0]
#             track_id = track['id']
#             track_name = track['name']
#             artist_name = track['artists'][0]['name']

#             # T·∫°o direct link ƒë·∫øn track tr√™n Spotify
#             track_url = f"https://open.spotify.com/track/{track_id}"
            
#             # Hi·ªÉn th·ªã th√¥ng tin v√† link
#             st.write(f"üéµ ƒê√£ t√¨m th·∫•y: **{track_name}** - {artist_name}")
#             st.markdown(f'''<a href="{track_url}" target="_blank">
#                          <button style="background-color: #1DB954; color: white; padding: 8px 16px; margin: 10px 0px;   
#                          border: none; border-radius: 20px; cursor: pointer;">
#                          ‚ñ∂Ô∏è Ph√°t tr√™n Spotify</button></a>''', 
#                          unsafe_allow_html=True)
            
#         else:
#             st.error("‚ùå Kh√¥ng t√¨m th·∫•y b√†i h√°t tr√™n Spotify!")

#     except Exception as e:
#         st.error(f"‚ùå L·ªói khi t√¨m ki·∫øm: {str(e)}")
        
from spotipy.oauth2 import SpotifyClientCredentials
def play_song_on_spotify(song_name):
    """
    T√¨m ki·∫øm b√†i h√°t v√† t·∫°o link tr·ª±c ti·∫øp ƒë·∫øn Spotify.
    Ph√°t nh·∫°c tr·ª±c ti·∫øp tr√™n trang web (n·∫øu c√≥ ƒëi·ªÅu ki·ªán).
    
    Parameters:
        song_name (str): T√™n b√†i h√°t c·∫ßn t√¨m
    """
    try:
        # Kh·ªüi t·∫°o Spotify client v·ªõi client credentials
        client_credentials_manager = SpotifyClientCredentials(
            client_id="6fe0ab17a16546c1a1f9032f1b154625",
            client_secret="bc68112c81324882bc092f8c42f8ca6d"
        )
        sp = spotipy.Spotify(client_credentials_manager=client_credentials_manager)

        # T√¨m ki·∫øm b√†i h√°t
        result = sp.search(q=song_name, type="track", limit=1)

        if result['tracks']['items']:
            track = result['tracks']['items'][0]
            track_id = track['id']
            track_name = track['name']
            artist_name = track['artists'][0]['name']

            embedded = f'<iframe src="https://open.spotify.com/embed/track/{track_id}" width="100%" height="380" frameBorder="0" allowtransparency="true" allow="encrypted-media"></iframe>'
            # Hi·ªÉn th·ªã th√¥ng tin b√†i h√°t
            st.write(f"üéµ ƒêang ph√°t: **{track_name}** - {artist_name}")

            # Nh√∫ng Spotify player
            st.components.v1.html(
                embedded,
                height=400
            )

        else:
            st.error("‚ùå Kh√¥ng t√¨m th·∫•y b√†i h√°t tr√™n Spotify!")

    except Exception as e:
        st.error(f"‚ùå L·ªói khi t√¨m ki·∫øm: {str(e)}")    
    
        
def show_recommendations_tab():
    # Kh·ªüi t·∫°o session state n·∫øu ch∆∞a c√≥
    if 'recommended_songs_df' not in st.session_state:
        st.session_state.recommended_songs_df = None
    if 'search_performed' not in st.session_state:
        st.session_state.search_performed = False

    with st.container():
        col1, col2 = st.columns([3, 1])
        
        with col1:
            song_name = st.text_input("Nh·∫≠p t√™n b√†i h√°t:", key="song_input")
            if st.button("T√¨m ki·∫øm", key="search_button_2"):
                # L∆∞u k·∫øt qu·∫£ v√†o session state
                recommended_songs = recommend_songs_based_on_song(song_name, data_song_input, num_recommendations=Num_song_rcm)
                st.session_state.recommended_songs_df = recommended_songs.applymap(str)
                st.session_state.search_performed = True
           

    # Hi·ªÉn th·ªã k·∫øt qu·∫£ n·∫øu ƒë√£ t√¨m ki·∫øm
    if st.session_state.search_performed and st.session_state.recommended_songs_df is not None:
        # Container cho DataFrame
        with st.container():
            displayed_df = st.session_state.recommended_songs_df[['name', 'artists', 'year', 'popularity']]
            st.dataframe(displayed_df, width=1200)
            
            # T·∫°o c√°c button "Nghe" cho m·ªói b√†i h√°t
            for index, row in displayed_df.iterrows():
                song_id = row['name']  # L·∫•y ID b√†i h√°t 
                if st.button(f"Nghe {row['name']}", key=f"play_button_{index}"):
                    play_song_on_spotify(song_id)
        
        # # Container cho c√°c n√∫t "Nghe"
        # with st.container():
        #     cols = st.columns(5)  # Chia th√†nh 5 c·ªôt ƒë·ªÉ hi·ªÉn th·ªã n√∫t
        #     for index, row in st.session_state.recommended_songs_df.iterrows():
        #         col_index = index % 5  # X√°c ƒë·ªãnh c·ªôt hi·ªán t·∫°i
        #         with cols[col_index]:
        #             # T·∫°o m·ªôt n√∫t nh·ªè g·ªçn h∆°n v·ªõi custom style
        #             st.markdown(f'''
        #                 <a href="https://open.spotify.com/track/{row['id']}" target="_blank">
        #                     <button style="
        #                         background-color: #1DB954;
        #                         color: white;
        #                         padding: 5px 10px;
        #                         border: none;
        #                         border-radius: 15px;
        #                         cursor: pointer;
        #                         font-size: 12px;
        #                         width: 100%;
        #                         margin: 2px 0;">
        #                         ‚ñ∂Ô∏è {row['name'][:20]}{"..." if len(row['name']) > 20 else ""}
        #                     </button>
        #                 </a>
        #             ''', unsafe_allow_html=True)
        
        # try:
        #     # Kh·ªüi t·∫°o Spotify client v·ªõi client credentials
        #     client_credentials_manager = SpotifyClientCredentials(
        #         client_id="6fe0ab17a16546c1a1f9032f1b154625",
        #         client_secret="bc68112c81324882bc092f8c42f8ca6d"
        #     )
        #     sp = spotipy.Spotify(client_credentials_manager=client_credentials_manager)

        #     # T√¨m ki·∫øm b√†i h√°t
        #     result = sp.search(q=song_name, type="track", limit=1)

        #     if result['tracks']['items']:
        #         track = result['tracks']['items'][0]
        #         track_id = track['id']
        #         track_name = track['name']
        #         artist_name = track['artists'][0]['name']

        #         embedded = f'<iframe src="https://open.spotify.com/embed/track/{track_id}" width="100%" height="380" frameBorder="0" allowtransparency="true" allow="encrypted-media"></iframe>'
        #         # Hi·ªÉn th·ªã th√¥ng tin b√†i h√°t
        #         st.write(f"üéµ ƒêang ph√°t: **{track_name}** - {artist_name}")

        #         # Nh√∫ng Spotify player
        #         st.components.v1.html(
        #             embedded,
        #             height=400
        #         )

        #     else:
        #         st.error("‚ùå Kh√¥ng t√¨m th·∫•y b√†i h√°t tr√™n Spotify!")

        # except Exception as e:
        #     st.error(f"‚ùå L·ªói khi t√¨m ki·∫øm: {str(e)}")

        
# Streamlit UI
# Slider ƒëi·ªÅu ch·ªânh s·ªë l∆∞·ª£ng b√†i h√°t ƒë·ªÅ xu·∫•t
Num_song_rcm = st.sidebar.slider(
    "S·ªë l∆∞·ª£ng b√†i h√°t ƒë·ªÅ xu·∫•t:", 
    0, 30, 5, 1
    # Min, Max, Default, Step
)
st.title("MUSIC RECOMMENDATION SYSTEM")
tab1, tab2, tab3 = st.tabs(["Recommend based on emotion", "Recommend based on song", "Search for song"])
with tab1:
    st.write("Ch·ª•p ·∫£nh t·ª´ camera, t·∫£i l√™n ho·∫∑c n√≥i ra c·∫£m x√∫c c·ªßa b·∫°n h√¥m nay!")
    # Ch·ªçn ngu·ªìn ·∫£nh
    option = st.radio("Ch·ªçn ngu·ªìn:", ("Ch·ª•p t·ª´ camera", "T·∫£i ·∫£nh l√™n", "Nh·∫≠p c·∫£m x√∫c"))
    if option == "Ch·ª•p t·ª´ camera":
        # Ch·ª•p ·∫£nh t·ª´ camera
        if st.button("Ch·ª•p ·∫£nh"):
            cap = cv2.VideoCapture(0)
            ret, frame = cap.read()
            if ret:
                st.image(frame, channels="BGR", caption="·∫¢nh ch·ª•p t·ª´ camera")
                cap.release()
                
                # D·ª± ƒëo√°n c·∫£m x√∫c
                emotion, probabilities = predict_emotion(frame)
                st.subheader(f"C·∫£m x√∫c d·ª± ƒëo√°n: {emotion}")
                print(emotion)
                st.bar_chart(data=dict(zip(Emotion_Classes, probabilities)))
                st.write("ƒê·ªÅ xu·∫•t b√†i h√°t:")
                display_recommendations(emotion, Num_song_rcm)
            else:
                st.error("Kh√¥ng th·ªÉ truy c·∫≠p camera!")
                cap.release()

    elif option == "T·∫£i ·∫£nh l√™n":
        # T·∫£i ·∫£nh t·ª´ t·ªáp
        uploaded_file = st.file_uploader("T·∫£i ·∫£nh l√™n", type=["jpg", "jpeg", "png"])
        if uploaded_file:
            img = Image.open(uploaded_file)
            img_np = np.array(img)
            st.image(img, caption="·∫¢nh ƒë√£ t·∫£i l√™n", use_column_width=True)
            
            # D·ª± ƒëo√°n c·∫£m x√∫c
            emotion, probabilities = predict_emotion(img_np)
            st.subheader(f"C·∫£m x√∫c d·ª± ƒëo√°n: {emotion}")
            st.bar_chart(data=dict(zip(Emotion_Classes, probabilities)))
            st.write("ƒê·ªÅ xu·∫•t b√†i h√°t:")
            display_recommendations(emotion, Num_song_rcm)
    else:
        # Nh·∫≠p c·∫£m x√∫c
        emotion = st.selectbox("C·∫£m x√∫c c·ªßa b·∫°n h√¥m nay:", Emotion_Classes, index = 0, key="emotion_select")
        st.write("ƒê·ªÅ xu·∫•t b√†i h√°t:")
        display_recommendations(emotion, Num_song_rcm)
with tab2:
    show_recommendations_tab()
with tab3:
    st.write("T√¨m ki·∫øm b√†i h√°t v√† nghe tr·ª±c ti·∫øp tr√™n Spotify!")
    name = st.text_input("Nh·∫≠p t√™n b√†i h√°t:", key="song_search_input")
    if st.button("T√¨m ki·∫øm", key = "search_button_3"):
        play_song_on_spotify(name)
    
    

